name: Pull Request Reminder

on:
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch:

jobs:
  remind-review:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.REPOSITORY_TOKEN }}
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      - name: Get Open PRs
        run: |
          gh pr list \
            --state open \
            --json number,title,url,author,reviewRequests \
            > prs.json

      - name: Build Slack Payload
        run: |
          echo "🔧 PR JSON 수집 완료. Slack 메시지 생성 시작..."

          HEADER_BLOCK=$(jq -nc '{
            type: "header",
            text: {
              type: "plain_text",
              text: "⏰ 데일리 PR 리뷰 알림",
              emoji: true
            }
          }')

          BLOCKS="[$HEADER_BLOCK"
          COUNT=0

          PR_COUNT=$(jq length prs.json)
          for i in $(seq 0 $((PR_COUNT - 1))); do
            PR=$(jq ".[$i]" prs.json)
            TITLE=$(echo "$PR" | jq -r '.title')
            NUMBER=$(echo "$PR" | jq -r '.number')
            URL=$(echo "$PR" | jq -r '.url')
            AUTHOR=$(echo "$PR" | jq -r '.author.login')
            REVIEWERS=$(echo "$PR" | jq -r '[.reviewRequests[].login] | join(", ")')

            if [ -z "$REVIEWERS" ]; then
              continue
            fi

            SECTION=$(jq -nc --arg title "$TITLE" --arg number "$NUMBER" --arg url "$URL" '{
              type: "section",
              text: {
                type: "mrkdwn",
                text: "\($title) #\($number)"
              },
              accessory: {
                type: "button",
                text: {
                  type: "plain_text",
                  text: "PR 바로가기",
                  emoji: true
                },
                value: "pr-\($number)",
                url: $url,
                action_id: "button-action"
              }
            }')

            CONTEXT=$(jq -nc --arg reviewers "$REVIEWERS" --arg author "$AUTHOR" '{
              type: "context",
              elements: [
                {
                  type: "mrkdwn",
                  text: "- 리뷰어: \($reviewers | split(", ") | map("<https://github.com/\(.)|@\(.)>") | join(", "))\n- 담당자: <https://github.com/\($author)|@\($author)>"
                }
              ]
            }')

            DIVIDER='{"type":"divider"}'

            BLOCKS="$BLOCKS, $SECTION, $CONTEXT, $DIVIDER"
            COUNT=$((COUNT + 1))
          done

          if [ "$COUNT" -eq 0 ]; then
            BLOCKS="$BLOCKS, {\"type\": \"section\", \"text\": {\"type\": \"mrkdwn\", \"text\": \"오늘은 리뷰 요청된 PR이 없습니다! 🎉\"}}"
          else
            BLOCKS=$(echo "$BLOCKS" | sed 's/,\s*{"type":"divider"}$//')
          fi

          BLOCKS="$BLOCKS]"

          echo "{\"blocks\": $BLOCKS}" > slack_payload.json

          echo "🧪 생성된 Slack Payload 내용:"
          cat slack_payload.json

      - name: Send Slack Notification
        run: |
          echo "🚀 Slack 알림 전송 시작..."
          HTTP_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST -H 'Content-type: application/json' \
            --data "@slack_payload.json" \
            ${{ secrets.SLACK_WEBHOOK_URL }})

          if [ "$HTTP_RESPONSE" -eq 200 ]; then
            echo "✅ Slack 알림 전송 성공 (HTTP $HTTP_RESPONSE)"
          else
            echo "❌ Slack 알림 전송 실패 (HTTP $HTTP_RESPONSE)"
            exit 1
          fi